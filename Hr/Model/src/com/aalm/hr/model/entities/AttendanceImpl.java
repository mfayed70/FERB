package com.aalm.hr.model.entities;

import com.aalm.hr.model.entities.temp.common.Enum;

import java.math.BigDecimal;

import java.math.RoundingMode;

import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;

import java.util.Calendar;

import oracle.jbo.Key;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Aug 29 09:06:42 EEST 2025
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AttendanceImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        AttendanceId,
        UserId,
        AttendanceDate,
        CheckInTime,
        CheckOutTime,
        Status,
        Remarks,
        WorkHours,
        CreatedAt,
        UpdatedAt,
        OrgUsers;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int ATTENDANCEID = AttributesEnum.AttendanceId.index();
    public static final int USERID = AttributesEnum.UserId.index();
    public static final int ATTENDANCEDATE = AttributesEnum.AttendanceDate.index();
    public static final int CHECKINTIME = AttributesEnum.CheckInTime.index();
    public static final int CHECKOUTTIME = AttributesEnum.CheckOutTime.index();
    public static final int STATUS = AttributesEnum.Status.index();
    public static final int REMARKS = AttributesEnum.Remarks.index();
    public static final int WORKHOURS = AttributesEnum.WorkHours.index();
    public static final int CREATEDAT = AttributesEnum.CreatedAt.index();
    public static final int UPDATEDAT = AttributesEnum.UpdatedAt.index();
    public static final int ORGUSERS = AttributesEnum.OrgUsers.index();

    /**
     * This is the default constructor (do not remove).
     */
    public AttendanceImpl() {
    }
    @Override
    protected void prepareForDML(int operation, TransactionEvent e) {
        super.prepareForDML(operation, e);

        Timestamp checkIn = (Timestamp) getAttributeInternal(CHECKINTIME);
        Timestamp checkOut = (Timestamp) getAttributeInternal(CHECKOUTTIME);
        Date attDate = (Date) getAttributeInternal(ATTENDANCEDATE);

        Enum status = new Enum("Absent"); // default

        if (attDate != null) {
            Calendar cal = Calendar.getInstance();
            cal.setTime(attDate);

            int dayOfWeek = cal.get(Calendar.DAY_OF_WEEK); // Sunday=1, Saturday=7
            if (dayOfWeek == Calendar.FRIDAY || dayOfWeek == Calendar.SATURDAY) {
                status = new Enum("Weekend");
            } else {
                if (checkIn == null && checkOut == null) {
                    status = new Enum("Absent");
                } else if (checkIn != null && checkOut == null) {
                    status = new Enum("Half Day");
                } else if (checkIn == null && checkOut != null) {
                    status = new Enum("Half Day");
                } else {
                    status = new Enum("Present");

                    // Work hours
                    long minutes = (checkOut.getTime() - checkIn.getTime()) / (1000 * 60);
                    BigDecimal hours = BigDecimal.valueOf(minutes / 60.0)
                            .setScale(2, RoundingMode.HALF_UP);
                    setWorkHours(hours);

                    // Office hours
                    Time officeStart = Time.valueOf("09:00:00");
                    Time officeEnd = Time.valueOf("17:00:00");
                    Time overtimeThreshold = Time.valueOf("19:00:00");

                    if (checkIn.after(officeStart)) {
                        status = new Enum("Late");
                    }

                    if (checkOut.before(officeEnd)) {
                        status = new Enum("Left Early");
                    }

                    if ((hours.intValue() > 8) && checkOut.after(overtimeThreshold)) {
                        status = new Enum("Overtime");
                    }
                }
            }
        }

        setStatus(status);
    }
    /**
     * Gets the attribute value for AttendanceId, using the alias name AttendanceId.
     * @return the value of AttendanceId
     */
    public BigDecimal getAttendanceId() {
        return (BigDecimal) getAttributeInternal(ATTENDANCEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for AttendanceId.
     * @param value value to set the AttendanceId
     */
    public void setAttendanceId(BigDecimal value) {
        setAttributeInternal(ATTENDANCEID, value);
    }

    /**
     * Gets the attribute value for UserId, using the alias name UserId.
     * @return the value of UserId
     */
    public Integer getUserId() {
        return (Integer) getAttributeInternal(USERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for UserId.
     * @param value value to set the UserId
     */
    public void setUserId(Integer value) {
        setAttributeInternal(USERID, value);
    }

    /**
     * Gets the attribute value for AttendanceDate, using the alias name AttendanceDate.
     * @return the value of AttendanceDate
     */
    public Date getAttendanceDate() {
        return (Date) getAttributeInternal(ATTENDANCEDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for AttendanceDate.
     * @param value value to set the AttendanceDate
     */
    public void setAttendanceDate(Date value) {
        setAttributeInternal(ATTENDANCEDATE, value);
    }

    /**
     * Gets the attribute value for CheckInTime, using the alias name CheckInTime.
     * @return the value of CheckInTime
     */
    public Timestamp getCheckInTime() {
        return (Timestamp) getAttributeInternal(CHECKINTIME);
    }

    /**
     * Sets <code>value</code> as the attribute value for CheckInTime.
     * @param value value to set the CheckInTime
     */
    public void setCheckInTime(Timestamp value) {
        setAttributeInternal(CHECKINTIME, value);
    }

    /**
     * Gets the attribute value for CheckOutTime, using the alias name CheckOutTime.
     * @return the value of CheckOutTime
     */
    public Timestamp getCheckOutTime() {
        return (Timestamp) getAttributeInternal(CHECKOUTTIME);
    }

    /**
     * Sets <code>value</code> as the attribute value for CheckOutTime.
     * @param value value to set the CheckOutTime
     */
    public void setCheckOutTime(Timestamp value) {
        setAttributeInternal(CHECKOUTTIME, value);
    }

    /**
     * Gets the attribute value for Status, using the alias name Status.
     * @return the value of Status
     */
    public Enum getStatus() {
        return (Enum) getAttributeInternal(STATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for Status.
     * @param value value to set the Status
     */
    public void setStatus(Enum value) {
        setAttributeInternal(STATUS, value);
    }

    /**
     * Gets the attribute value for Remarks, using the alias name Remarks.
     * @return the value of Remarks
     */
    public String getRemarks() {
        return (String) getAttributeInternal(REMARKS);
    }

    /**
     * Sets <code>value</code> as the attribute value for Remarks.
     * @param value value to set the Remarks
     */
    public void setRemarks(String value) {
        setAttributeInternal(REMARKS, value);
    }

    /**
     * Gets the attribute value for WorkHours, using the alias name WorkHours.
     * @return the value of WorkHours
     */
    public BigDecimal getWorkHours() {
        return (BigDecimal) getAttributeInternal(WORKHOURS);
    }

    /**
     * Sets <code>value</code> as the attribute value for WorkHours.
     * @param value value to set the WorkHours
     */
    public void setWorkHours(BigDecimal value) {
        setAttributeInternal(WORKHOURS, value);
    }

    /**
     * Gets the attribute value for CreatedAt, using the alias name CreatedAt.
     * @return the value of CreatedAt
     */
    public Timestamp getCreatedAt() {
        return (Timestamp) getAttributeInternal(CREATEDAT);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedAt.
     * @param value value to set the CreatedAt
     */
    public void setCreatedAt(Timestamp value) {
        setAttributeInternal(CREATEDAT, value);
    }

    /**
     * Gets the attribute value for UpdatedAt, using the alias name UpdatedAt.
     * @return the value of UpdatedAt
     */
    public Timestamp getUpdatedAt() {
        return (Timestamp) getAttributeInternal(UPDATEDAT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UpdatedAt.
     * @param value value to set the UpdatedAt
     */
    public void setUpdatedAt(Timestamp value) {
        setAttributeInternal(UPDATEDAT, value);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getOrgUsers() {
        return (EntityImpl) getAttributeInternal(ORGUSERS);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setOrgUsers(EntityImpl value) {
        setAttributeInternal(ORGUSERS, value);
    }

    /**
     * @param attendanceId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal attendanceId) {
        return new Key(new Object[] { attendanceId });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("com.aalm.hr.model.entities.Attendance");
    }
}

