package com.aalm.gl.model.entities;

import oracle.jbo.Key;
import oracle.jbo.RowInconsistentException;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Apr 08 21:08:14 EET 2024
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class GlDocumentsImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        GlDocId,
        GlDocName,
        REVIEWFLAG,
        BalanceFlag,
        PostFlag,
        OrgCode,
        GlTrnsTypeId,
        SumDebit,
        SumCredit,
        GlDocDt,
        OriginGlDocId,
        OriginOrgCode,
        GlJournals;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int GLDOCID = AttributesEnum.GlDocId.index();
    public static final int GLDOCNAME = AttributesEnum.GlDocName.index();
    public static final int REVERSEDFLAG = AttributesEnum.REVIEWFLAG.index();
    public static final int BALANCEFLAG = AttributesEnum.BalanceFlag.index();
    public static final int POSTFLAG = AttributesEnum.PostFlag.index();
    public static final int ORGCODE = AttributesEnum.OrgCode.index();
    public static final int GLTRNSTYPEID = AttributesEnum.GlTrnsTypeId.index();
    public static final int SUMDEBIT = AttributesEnum.SumDebit.index();
    public static final int SUMCREDIT = AttributesEnum.SumCredit.index();
    public static final int GLDOCDT = AttributesEnum.GlDocDt.index();
    public static final int ORIGINGLDOCID = AttributesEnum.OriginGlDocId.index();
    public static final int ORIGINORGCODE = AttributesEnum.OriginOrgCode.index();
    public static final int GLJOURNALS = AttributesEnum.GlJournals.index();

    /**
     * This is the default constructor (do not remove).
     */
    public GlDocumentsImpl() {
    }

    /**
     * @param glDocId key constituent
     * @param orgCode key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Integer glDocId, Integer orgCode) {
        return new Key(new Object[] { glDocId, orgCode });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("com.aalm.gl.model.entities.GlDocuments");
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        try {
              super.lock();
          } catch (RowInconsistentException e) {
          // checkInconsistentAttrs();
              refresh(REFRESH_WITH_DB_ONLY_IF_UNCHANGED  );

              super.lock();
          }
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}

