package com.aalm.gl.model.entities;

import oracle.jbo.Key;
import oracle.jbo.RowInconsistentException;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Feb 11 13:35:39 EET 2024
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class GlJournalsImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        JornalId,
        AccCode,
        OrgCode,
        AssCode,
        CurrCode,
        Debit,
        Credit,
        CostCenterCode,
        Notes,
        GlDocId,
        GlDocumentsOrgCode,
        LocalCredit,
        LocalDebit,
        GlDocuments,
        GlOrgAccChart,
        GlAccAssistances,
        GlCostCenters;
        static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int JORNALID = AttributesEnum.JornalId.index();
    public static final int ACCCODE = AttributesEnum.AccCode.index();
    public static final int ORGCODE = AttributesEnum.OrgCode.index();
    public static final int ASSCODE = AttributesEnum.AssCode.index();
    public static final int CURRCODE = AttributesEnum.CurrCode.index();
    public static final int DEBIT = AttributesEnum.Debit.index();
    public static final int CREDIT = AttributesEnum.Credit.index();
    public static final int COSTCENTERCODE = AttributesEnum.CostCenterCode.index();
    public static final int NOTES = AttributesEnum.Notes.index();
    public static final int GLDOCID = AttributesEnum.GlDocId.index();
    public static final int GLDOCUMENTSORGCODE = AttributesEnum.GlDocumentsOrgCode.index();
    public static final int LOCALCREDIT = AttributesEnum.LocalCredit.index();
    public static final int LOCALDEBIT = AttributesEnum.LocalDebit.index();
    public static final int GLDOCUMENTS = AttributesEnum.GlDocuments.index();
    public static final int GLORGACCCHART = AttributesEnum.GlOrgAccChart.index();
    public static final int GLACCASSISTANCES = AttributesEnum.GlAccAssistances.index();
    public static final int GLCOSTCENTERS = AttributesEnum.GlCostCenters.index();

    /**
     * This is the default constructor (do not remove).
     */
    public GlJournalsImpl() {
    }

    /**
     * @param jornalId key constituent
     * @param orgCode key constituent
     * @param glDocId key constituent
     * @param glDocumentsOrgCode key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String jornalId, Integer orgCode, Integer glDocId, Integer glDocumentsOrgCode) {
        return new Key(new Object[] { jornalId, orgCode, glDocId, glDocumentsOrgCode });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("com.aalm.gl.model.entities.GlJournals");
    }


    /**
     * Add locking logic here.
     */
    public void lock() {
        try {
              super.lock();
          } catch (RowInconsistentException e) {
          // checkInconsistentAttrs();
              refresh(REFRESH_WITH_DB_ONLY_IF_UNCHANGED  );

              super.lock();
          }
        }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}

