package com.aalm.center.model;

import com.aalm.center.model.common.AalmCentral;

import com.aalm.center.model.views.ItemsToBeSelectedInAssImpl;

import java.sql.CallableStatement;
import java.sql.SQLException;

import oracle.jbo.JboException;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.DBTransactionImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Sep 25 20:48:23 EET 2023
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AalmCentralImpl extends ApplicationModuleImpl implements AalmCentral {
    /**
     * This is the default constructor (do not remove).
     */
    public AalmCentralImpl() {
    }
    //
    public int validate_var_value(String v_val){
        int v_returned_recs;
        DBTransactionImpl dbti = (DBTransactionImpl) getDBTransaction();
        CallableStatement stmnt = dbti.createCallableStatement(("call validate_var_value(?,?);"), 0);
        try {
            stmnt.setString(1, v_val);
            stmnt.execute();
            v_returned_recs = stmnt.getInt(2);
//            executeCommand("Commit");
                System.out.println("check done.++++++++"+v_returned_recs );
        }catch (SQLException sqlerr) {
    //            System.out.println(" This is not done--------");
            throw new JboException(sqlerr);
        } finally {
            try {
                if (stmnt != null) {
                    stmnt.close();
                }
            } catch (SQLException closeerr) {
                throw new JboException(closeerr);
            }
        } 
        return v_returned_recs;
    }
    // delete items from items test table
    public void delete_items_from_item_variables_test(){
        DBTransactionImpl dbti = (DBTransactionImpl) getDBTransaction();
        CallableStatement stmnt = dbti.createCallableStatement(("delete from ITEM_VARIABLES_TEST;"), 0);
        try {
            stmnt.execute();
            executeCommand("Commit");
//            System.out.println("creation done.++++++++");
        }catch (SQLException sqlerr) {
//            System.out.println(" This is not done--------");
            throw new JboException(sqlerr);
        } finally {
            try {
                if (stmnt != null) {
                    stmnt.close();
                }
            } catch (SQLException closeerr) {
                throw new JboException(closeerr);
            }
        } 
    }
// create_items_from_item_variables_test
    public void create_items_from_item_variables_test(){
        DBTransactionImpl dbti = (DBTransactionImpl) getDBTransaction();
        CallableStatement stmnt = dbti.createCallableStatement(("call create_items_from_item_variables_test();"), 0);
        try {
            stmnt.execute();
            executeCommand("Commit");
            System.out.println("Items creation is done.");
        }catch (SQLException sqlerr) {
            System.out.println(sqlerr.getMessage());
            throw new JboException(sqlerr);
        } finally {
            try {
                if (stmnt != null) {
                    stmnt.close();
                }
            } catch (SQLException closeerr) {
                throw new JboException(closeerr);
            }
        } 
    }
    
    public void add_item_structure (String origCol,String COLNAME) {
        DBTransactionImpl dbti1 = (DBTransactionImpl) getDBTransaction();
        CallableStatement statement1 =
        (CallableStatement)dbti1.createCallableStatement(("call add_item_structure(?,?);"), 0);
        try {
    //            System.out.println("1- "+vFileId +"  2- "+ vGrantTo + "  3- "+vPtnt);
            statement1.setString(1, origCol);
            statement1.setString(2, COLNAME);
            statement1.execute();
            executeCommand("Commit");
        }catch (SQLException sqlerr) {
            throw new JboException(sqlerr);
        } finally {
            try {
                if (statement1 != null) {
                    statement1.close();
                }
            } catch (SQLException closeerr) {
                throw new JboException(closeerr);
            }
        } 
    
    }
    /**--------------------------
      */
    public void create_items_from_variables (String catId, String unitId, Integer orgCode) {
        DBTransactionImpl dbti1 = (DBTransactionImpl) getDBTransaction();
        CallableStatement statement1 =
        (CallableStatement)dbti1.createCallableStatement(("call create_items_from_variables(?,?,?);"), 0);
        try {
    //            System.out.println("1- "+vFileId +"  2- "+ vGrantTo + "  3- "+vPtnt);
    statement1.setString(1, catId);
    statement1.setString(2, unitId);
    statement1.setInt(3, orgCode);
            statement1.execute();
            executeCommand("Commit");
        }catch (SQLException sqlerr) {
            throw new JboException(sqlerr);
        } finally {
            try {
                if (statement1 != null) {
                    statement1.close();
                }
            } catch (SQLException closeerr) {
                throw new JboException(closeerr);
            }
        } 
    
    }
    /**
     * Container's getter for CurrenciesV.
     * @return CurrenciesV
     */
    public ViewObjectImpl getCurrenciesV() {
        return (ViewObjectImpl) findViewObject("CurrenciesV");
    }

    /**
     * Container's getter for CurrencyTransformV.
     * @return CurrencyTransformV
     */
    public ViewObjectImpl getCurrencyTransformV() {
        return (ViewObjectImpl) findViewObject("CurrencyTransformV");
    }

    /**
     * Container's getter for ItemCategoriesV.
     * @return ItemCategoriesV
     */
    public ViewObjectImpl getItemCategoriesV() {
        return (ViewObjectImpl) findViewObject("ItemCategoriesV");
    }

    /**
     * Container's getter for StoreCategoriesV.
     * @return StoreCategoriesV
     */
    public ViewObjectImpl getStoreCategoriesV() {
        return (ViewObjectImpl) findViewObject("StoreCategoriesV");
    }

    /**
     * Container's getter for OrganizationsV.
     * @return OrganizationsV
     */
    public ViewObjectImpl getOrganizationsV() {
        return (ViewObjectImpl) findViewObject("OrganizationsV");
    }

    /**
     * Container's getter for ItemsListV.
     * @return ItemsListV
     */
    public ViewObjectImpl getItemsListV() {
        return (ViewObjectImpl) findViewObject("ItemsListV");
    }

    /**
     * Container's getter for ItemsStructureV1.
     * @return ItemsStructureV1
     */
    public ViewObjectImpl getItemsStructureV1() {
        return (ViewObjectImpl) findViewObject("ItemsStructureV1");
    }

    /**
     * Container's getter for ItemsStructureV2.
     * @return ItemsStructureV2
     */
    public ViewObjectImpl getItemsStructureV2() {
        return (ViewObjectImpl) findViewObject("ItemsStructureV2");
    }

    /**
     * Container's getter for ItemsToBeSelectedInAss.
     * @return ItemsToBeSelectedInAss
     */
    public ItemsToBeSelectedInAssImpl getItemsToBeSelectedInAss() {
        return (ItemsToBeSelectedInAssImpl) findViewObject("ItemsToBeSelectedInAss");
    }

    /**
     * Container's getter for UnitsV.
     * @return UnitsV
     */
    public ViewObjectImpl getUnitsV() {
        return (ViewObjectImpl) findViewObject("UnitsV");
    }

    /**
     * Container's getter for UnitsTransformV.
     * @return UnitsTransformV
     */
    public ViewObjectImpl getUnitsTransformV() {
        return (ViewObjectImpl) findViewObject("UnitsTransformV");
    }


    /**
     * Container's getter for fk_CURRENCY_TRANSFORM_CURRENCIES1VL1.
     * @return fk_CURRENCY_TRANSFORM_CURRENCIES1VL1
     */
    public ViewLinkImpl getfk_CURRENCY_TRANSFORM_CURRENCIES1VL1() {
        return (ViewLinkImpl) findViewLink("fk_CURRENCY_TRANSFORM_CURRENCIES1VL1");
    }

    /**
     * Container's getter for fk_ITEMS_STRUCTURE_ITEMS_LIST1VL2.
     * @return fk_ITEMS_STRUCTURE_ITEMS_LIST1VL2
     */
    public ViewLinkImpl getfk_ITEMS_STRUCTURE_ITEMS_LIST1VL2() {
        return (ViewLinkImpl) findViewLink("fk_ITEMS_STRUCTURE_ITEMS_LIST1VL2");
    }

    /**
     * Container's getter for ItemStructureRecursiveCL1.
     * @return ItemStructureRecursiveCL1
     */
    public ViewLinkImpl getItemStructureRecursiveCL1() {
        return (ViewLinkImpl) findViewLink("ItemStructureRecursiveCL1");
    }

    /**
     * Container's getter for FkUnitsTransformUnits1VL1.
     * @return FkUnitsTransformUnits1VL1
     */
    public ViewLinkImpl getFkUnitsTransformUnits1VL1() {
        return (ViewLinkImpl) findViewLink("FkUnitsTransformUnits1VL1");
    }


    /**
     * Container's getter for ItemTestV1.
     * @return ItemTestV1
     */
    public ViewObjectImpl getItemTestV1() {
        return (ViewObjectImpl) findViewObject("ItemTestV1");
    }

    /**
     * Container's getter for ItemVariablesV1.
     * @return ItemVariablesV1
     */
    public ViewObjectImpl getItemVariablesV() {
        return (ViewObjectImpl) findViewObject("ItemVariablesV");
    }

    /**
     * Container's getter for ItemVariableValuesV1.
     * @return ItemVariableValuesV1
     */
    public ViewObjectImpl getItemVariableValuesV() {
        return (ViewObjectImpl) findViewObject("ItemVariableValuesV");
    }

    /**
     * Container's getter for FkItemVariantValuesItemVariants1VL1.
     * @return FkItemVariantValuesItemVariants1VL1
     */
    public ViewLinkImpl getFkItemVariantValuesItemVariants1VL1() {
        return (ViewLinkImpl) findViewLink("FkItemVariantValuesItemVariants1VL1");
    }

    /**
     * Container's getter for ItemVariablesTestV1.
     * @return ItemVariablesTestV1
     */
    public ViewObjectImpl getItemVariablesTestV() {
        return (ViewObjectImpl) findViewObject("ItemVariablesTestV");
    }


    /**
     * Container's getter for AssSelectedItemsV1.
     * @return AssSelectedItemsV1
     */
    public ViewObjectImpl getAssSelectedItemsV() {
        return (ViewObjectImpl) findViewObject("AssSelectedItemsV");
    }


    /**
     * Container's getter for DummyUnitsCategoriesV1.
     * @return DummyUnitsCategoriesV1
     */
    public ViewObjectImpl getDummyUnitsCategoriesV() {
        return (ViewObjectImpl) findViewObject("DummyUnitsCategoriesV");
    }

    /**
     * Container's getter for ItemVariablesVaaluesStatistics1.
     * @return ItemVariablesVaaluesStatistics1
     */
    public ViewObjectImpl getItemVariablesVaaluesStatistics() {
        return (ViewObjectImpl) findViewObject("ItemVariablesVaaluesStatistics");
    }

    /**
     * Container's getter for ItemsVariablesForCaptionsV1.
     * @return ItemsVariablesForCaptionsV1
     */
    public ViewObjectImpl getItemsVariablesForCaptionsV() {
        return (ViewObjectImpl) findViewObject("ItemsVariablesForCaptionsV");
    }

    /**
     * Container's getter for ValidateValuesInItemsListV1.
     * @return ValidateValuesInItemsListV1
     */
    public ViewObjectImpl getValidateValuesInItemsListV() {
        return (ViewObjectImpl) findViewObject("ValidateValuesInItemsListV");
    }

    /**
     * Container's getter for ItemCategoryTypesV1.
     * @return ItemCategoryTypesV1
     */
    public ViewObjectImpl getItemCategoryTypesV() {
        return (ViewObjectImpl) findViewObject("ItemCategoryTypesV");
    }

    /**
     * Container's getter for fk_ITEM_CATEGORY_TYPES_ITEM_CATEGORIES1VL1.
     * @return fk_ITEM_CATEGORY_TYPES_ITEM_CATEGORIES1VL1
     */
    public ViewLinkImpl getfk_ITEM_CATEGORY_TYPES_ITEM_CATEGORIES1VL1() {
        return (ViewLinkImpl) findViewLink("fk_ITEM_CATEGORY_TYPES_ITEM_CATEGORIES1VL1");
    }
}

